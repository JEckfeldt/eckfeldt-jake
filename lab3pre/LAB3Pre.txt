		JAKE ECKFELDT 11688261

             LAB3pre Work: Processes in an OS Kernel
                     DUE: 9-23-2021
       Answer questions below. Submit a (text-edit) file to TA
	     
1. READ List: Chapter 3: 3.1-3.5

What's a process? (Page 102): The execution of an image.
	     
Each process is represented by a PROC structure.
Read the PROC structure in 3.4.1 on Page 111 and answer the following questions:

What's the meaning of:
   pid, ppid? Process Id, Parent Process Id.
   status   ? Current status: FREE, READY, SLEEP
   priority ? Scheduling Priority
   event    ? Event value to SLEEP on.
   exitCode ? Death note (How it died).

READ 3.5.2 on Process Family Tree. What are the
   PROC pointers child, sibling, parent used for?
	Child: Linked list of child nodes
	Sibling: Linked list of sibling nodes
	Parent: points to parent node
	     
2. Download samples/LAB3pre/mtx. Run it under Linux.
   MTX is a multitasking system. It simulates process operations in a
   Unix/Linux kernel, which include
              fork, exit, wait, sleep, wakeup, process switching

	     
/*********** A Multitasking System ************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "type.h"    // PROC struct and system constants
	
// global variables:
PROC proc[NPROC], *running, *freeList, *readyQueue, *sleepList; 

running    = pointer to the current running PROC
freeList   = a list of all FREE PROCs
readyQueue = a priority queue of procs that are READY to run
sleepList  = a list of SLEEP procs, if any.

Run mtx. It first initialize the system, creates an initial process P0.
P0 has the lowest priotiry 0, all other processes have priority 1

Ater initialization,
     P0 forks a child prcoess P1, switch process to run P1.

                The display looks like the following
-----------------------------------------------------------------------------
Welcome to KCW's Multitasking System
1. init system
freeList = [0 0]->[1 0]->[2 0]->[3 0]->[4 0]->[5 0]->[6 0]->[7 0]->[8 0]->NULL

2. create initial process P0
init complete: P0 running

3. P0 fork P1 : enter P1 into readyQueue
	     
4. P0 switch process to run P1
   P0: switch task
   proc 0 in scheduler()
   readyQueue = [1 1]->[0 0]->NULL
   next running = 1
   proc 1 resume to body()

proc 1 running: Parent=0 childList = NULL
freeList  = [2 0]->[3 0]->[4 0]->[5 0]->[6 0]->[7 0]->[8 0]->NULL
readQueue = [0 0]->NULL
sleepList = NULL
input a command: [ps|fork|switch|exit|sleep|wakeup|wait] : 
----------------------------------------------------------------------------
5.                     COMMANDS:
ps     : display procs with pid, ppid, status; same as ps in Unix/Linux

fork   : READ kfork()   on Page 109: What does it do? Creates a child task and enters it into the ready QUEUE

switch : READ tswitch() on Page 108: What does it do? Process switching, SAVES current task point, 
	scheduler() to pick next running task, RESUME sets CPU stack ptr to current running task.

exit   : READ kexit()   on Page 112: What does it do? Erase context, kill child processes, record exitValue,
	become ZOMBIE but don't free PROC, WAKEUP parent/P1

sleep  : READ ksleep()  on Page 111: What does it do? RECORD event value, change status to SLEEP, enqueue into sleep_list, call tswitch();

wakeup : READ kwakeup() on Page 112: What does it do? loop through PROC ptr in sleep_list, if p is sleeping remove p from sleep_list
	make p READY, enter p into READY QUEUE
	     
wait   : READ kwait()   on Page 114: What does it do? waits for a ZOMBIE child process, if successful releases ZOMBIE child to freeList
---------------------------------------------------------------------------

------------------------ TEST REQUIREMENTS ---------------------------------
6. Step 1: test fork
While P1 running, enter fork: What happens? Make child 2 enter the READY QUEUE

Enter fork many times; 
      How many times can P1 fork? 8 TIMES WHY? No more Processes in PROCESS LIST

Enter Control-c to end the program run.


7. Step 2: Test sleep/wakeup
Run mtx again.
While P1 running, fork a child P2;
Switch to run P2. Where did P1 go? into READY QUEUE WHY? because its child is P2,
	P1 run when P2 ZOMBIE.

P2 running : Enter sleep, with a value, e.g.123 to let P2 SLEEP.
What happens? P1 Start running again and P2 goes to sleep list
	WHY? we sleep P2, then P1 resumes because its next in READY QUEUE

Now, P1 should be running. Enter wakeup with a value, e.g. 234
Did any proc wake up? NO WHY? WAKEUP values didn't match

P1: Enter wakeup with 123
What happens? P2 Wake up WHY? 123 matched sleep value


8. Step 3: test child exit/parent wait
	     
When a proc dies (exit) with a value, it becomes a ZOMBIE, wakeup its parent.
Parent may issue wait to wait for a ZOMBIE child, and frees the ZOMBIE

Run mtx;
P1: enter wait; What happens? ERROR, no child WHY? P1 have no child

CASE 1: child exit first, parent wait later

P1: fork a child P2, switch to P2.
P2: enter exit, with a value, e.g. 123 ==> P2 will die with exitCode=123.
Which process runs now? P1 WHY? it was next in READY QUEUE
enter ps to see the proc status: P2 status = ? ZOMBIE

(P1 still running) enter wait; What happens? P1 waits for P2 ZOMBIE and gives exit status
                   enter ps;   What happened to P2? P2 added on end of FREE LIST

CASE 2: parent wait first, child exit later

P1: enter fork to fork a child P3
P1: enter wait;  What happens to P1? Enter sleep_list
	WHY? in scheduler waiting for ZOMBIE child

P3: Enter exit with a value; What happens? wakeup P1, P3 in scheduler, now P1 RUNNING
P1: enter ps;  What's the status of P3? FREE WHY? P1 wait for ZOMBIE,
	return EXIT code, FREE ZOMBIE, APPEND to FREE LIST
	     
9. Step 4: test Orphans
	     
When a process with children dies first, all its children become orphans.
In Unix/Linux, every process (except P0) MUST have a unique parent.
So, all orphans become P1's children. Hence P1 never dies.

Run mtx again.
P1: fork child P2, Switch to P2.
P2: fork several children of its own, e.g. P3, P4, P5 (all in its childList).
P2: exit with a value. 
P1 should be running WHY? all ORPHANS given to P1
P1: enter ps to see proc status: which proc is ZOMBIE? P2
What happened to P2's children? Gave away to P1
P1: enter wait; What happens? RETURN P2 EXIT CODE, FREE P2
P1: enter wait again; What happens? P1 sleep now P3 running WHY? P3 was next in READY QUEUE

How to let P1 READY to run again? EXIT all children of P1



  